openapi: 3.0.3
info:
  title: Your Project API
  version: 1.0.0
  description: Your project description
paths:
  /api/comments/:
    get:
      operationId: api_comments_list
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comments'
          description: ''
    post:
      operationId: api_comments_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comments'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
  /api/comments/{comment_id}:
    get:
      operationId: api_comments_retrieve
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
    put:
      operationId: api_comments_update
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Comments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Comments'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
    patch:
      operationId: api_comments_partial_update
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedComments'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedComments'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedComments'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comments'
          description: ''
    delete:
      operationId: api_comments_destroy
      parameters:
      - in: path
        name: comment_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_list
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: api_users_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/{user_id}:
    get:
      operationId: api_users_retrieve
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: api_users_destroy
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/users/login/:
    post:
      operationId: api_users_login_create
      description: |-
        Takes a set of user credentials and returns an access and refresh JSON web
        token pair to prove the authentication of those credentials.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenObtainPair'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenObtainPair'
          description: ''
  /api/weapons/:
    get:
      operationId: api_weapons_list
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Weapon'
          description: ''
    post:
      operationId: api_weapons_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Weapon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Weapon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Weapon'
        required: true
      security:
      - jwtAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weapon'
          description: ''
  /api/weapons/{weapon_id}:
    get:
      operationId: api_weapons_retrieve
      parameters:
      - in: path
        name: weapon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weapon'
          description: ''
    put:
      operationId: api_weapons_update
      parameters:
      - in: path
        name: weapon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Weapon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Weapon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Weapon'
        required: true
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weapon'
          description: ''
    patch:
      operationId: api_weapons_partial_update
      parameters:
      - in: path
        name: weapon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedWeapon'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedWeapon'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedWeapon'
      security:
      - jwtAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Weapon'
          description: ''
    delete:
      operationId: api_weapons_destroy
      parameters:
      - in: path
        name: weapon_id
        schema:
          type: integer
        required: true
      tags:
      - api
      security:
      - jwtAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Atribute:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        caliber:
          type: string
          maxLength: 100
        system:
          type: string
          maxLength: 100
        capacity:
          type: string
          maxLength: 100
        weight:
          type: string
          maxLength: 100
        length:
          type: string
          maxLength: 100
        material:
          type: string
          maxLength: 100
        model:
          type: string
          maxLength: 100
        operation:
          type: string
          maxLength: 100
        finishing:
          type: string
          maxLength: 100
      required:
      - id
    Comments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
          maxLength: 1000
        user_comments:
          type: integer
          readOnly: true
        commented_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - comment
      - commented_at
      - id
      - user_comments
    GroupEnum:
      enum:
      - Guns
      - Knife
      - Bow
      - CrossBow
      - Uniformed
      type: string
      description: |-
        * `Guns` - Guns
        * `Knife` - Knife
        * `Bow` - Bow
        * `CrossBow` - Crossbow
        * `Uniformed` - Uninformed
    PatchedComments:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        comment:
          type: string
          maxLength: 1000
        user_comments:
          type: integer
          readOnly: true
        commented_at:
          type: string
          format: date-time
          readOnly: true
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        date_joined:
          type: string
          format: date-time
        phone_number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        cpf:
          type: string
          maxLength: 14
        is_employee:
          type: boolean
        password:
          type: string
          writeOnly: true
          maxLength: 128
    PatchedWeapon:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        atributes:
          $ref: '#/components/schemas/Atribute'
        name:
          type: string
          maxLength: 100
        tipe:
          type: string
          maxLength: 20
        price:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        descripition:
          type: string
          maxLength: 600
        image:
          type: string
          maxLength: 200
        image2:
          type: string
          maxLength: 200
        image3:
          type: string
          maxLength: 200
        group:
          $ref: '#/components/schemas/GroupEnum'
    TokenObtainPair:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          readOnly: true
      required:
      - access
      - password
      - refresh
      - username
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          maxLength: 254
        date_joined:
          type: string
          format: date-time
        phone_number:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        cpf:
          type: string
          maxLength: 14
        is_employee:
          type: boolean
        password:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - cpf
      - email
      - id
      - password
      - phone_number
      - username
    Weapon:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        atributes:
          $ref: '#/components/schemas/Atribute'
        name:
          type: string
          maxLength: 100
        tipe:
          type: string
          maxLength: 20
        price:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        descripition:
          type: string
          maxLength: 600
        image:
          type: string
          maxLength: 200
        image2:
          type: string
          maxLength: 200
        image3:
          type: string
          maxLength: 200
        group:
          $ref: '#/components/schemas/GroupEnum'
      required:
      - atributes
      - descripition
      - id
      - image
      - image2
      - name
      - price
      - tipe
  securitySchemes:
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
